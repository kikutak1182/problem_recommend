{
  "tags": [
    {
      "id": "DP",
      "name": "動的計画法",
      "aliases": ["DP", "動的計画", "Dynamic Programming", "メモ化", "dp"],
      "description": "大きな問題を部分問題に分割し、結果をテーブルに記録・再利用する最適化手法。「i番目までで状態jになる最適値/場合の数」を漸化式で求めるのが典型で、ナップサック問題などが代表例。計算量は(状態数)×(遷移)で決まり、bitDPや区間DPといった頻出パターンも存在する。"
    },
    {
      "id": "KDP", 
      "name": "桁DP",
      "aliases": ["桁DP", "桁dp", "digit DP", "digit dp"],
      "description": "数値の各桁を状態として持つ動的計画法の特殊形。N桁以下で特定条件を満たす数の個数を数える問題に使用される。桁数×桁×フラグ状態をDPテーブルとし、上からi桁目まで確定した状態を遷移。計算量はO(桁数×10×状態数)で、ABC形式では頻出パターン。"
    },
    {
      "id": "MXF",
      "name": "最大流",
      "aliases": ["最大流", "max flow", "maximum flow", "マックスフロー", "maxflow"],
      "description": "容量制約付きグラフで始点から終点への最大流量を求める問題。Ford-Fulkerson法やDinic法を使用し、二部マッチングや最小カット問題に帰着できる。計算量はO(VE²)からO(V²E)程度。競プロでは割り当て問題や容量制約のある輸送問題として頻出。"
    },
    {
      "id": "GRP",
      "name": "グラフ",
      "aliases": ["グラフ", "graph"],
      "description": "頂点と辺で構成される構造を扱う問題の総称。隣接リストまたは隣接行列で表現し、DFS/BFS探索、最短路、連結性判定などが基本操作。計算量は辺数や頂点数に依存。競プロでは木構造、DAG、二部グラフなど特殊形も含む包括的カテゴリ。"
    },
    {
      "id": "TRE",
      "name": "木構造",
      "aliases": ["木構造"],
      "description": "N個の頂点とN-1個の辺からなる閉路のない連結グラフ。親子関係や深さの概念があり、木DPや木上の最短路問題が典型。DFSでO(N)で全探索可能。競プロでは最小全域木、LCA、Heavy-Light分解など高度な木アルゴリズムも頻出。"
    },
    {
      "id": "GEO",
      "name": "幾何",
      "aliases": ["幾何", "計算幾何"],
      "description": "2次元・3次元空間での点、線、面を扱う計算幾何問題。距離計算、直線の交点、凸包構築が基本操作。浮動小数点の精度誤差に注意が必要。計算量は凸包でO(N log N)。競プロでは面積計算、最近点対、線分交差判定などが頻出パターン。"
    },
    {
      "id": "UF",
      "name": "Union-Find",
      "aliases": ["Union-Find", "UnionFind", "DSU", "Disjoint Set Union", "素集合データ構造", "union find"],
      "description": "互いに素な集合を効率的に管理するデータ構造。Union操作で集合を併合、Find操作で要素の所属判定を行う。経路圧縮とランク併合でほぼO(1)の償却計算量を実現。競プロでは連結成分の管理、最小全域木、動的連結性判定で必須のツール。"
    },
    {
      "id": "SEG",
      "name": "セグメント木", 
      "aliases": ["セグメント木", "セグ木", "Segment Tree", "SegTree", "segtree"],
      "description": "区間に対する更新・クエリをO(log N)で処理する完全二分木ベースのデータ構造。各ノードが子区間の情報を保持し、範囲和や最大値取得が高速。単点更新版と区間更新版があり、競プロでは Range Minimum Query や動的な統計情報管理で頻出。"
    },
    {
      "id": "BIT",
      "name": "Fenwick Tree",
      "aliases": ["Fenwick Tree", "BIT", "Binary Indexed Tree", "Fenwick", "fenwick tree", "フェンウィック木", "フェニック木"],
      "description": "累積和の更新・取得をO(log N)で行うデータ構造。二進表現を利用した効率的な実装で、区間和クエリに特化。セグメント木より軽量で実装が簡単。計算量は更新・取得ともO(log N)。競プロでは座標圧縮と組み合わせた動的な区間和管理で頻出。"
    },
    {
      "id": "PRM",
      "name": "素数",
      "aliases": ["素数", "prime", "素数判定", "エラトステネスの篩", "素因数分解"],
      "description": "整数の素数性を扱う数論問題。エラトステネスの篩でO(N log log N)で素数列挙、試し割りでO(√N)で素数判定を行う。大きな数にはミラーラビン判定法を使用。競プロでは素因数分解、約数の個数、オイラーのφ関数などと組み合わせて頻出。"
    },
    {
      "id": "EXP",
      "name": "期待値",
      "aliases": ["期待値", "確率", "probability", "expected value", "期待値計算"],
      "description": "確率分布に基づく期待値を数学的に計算する問題。確率×結果の総和として定義され、線形性を利用した計算が基本。無限級数や条件付き期待値も扱う。計算量は問題設定に依存。競プロでは確率DPや確率的アルゴリズムの解析、ゲーム理論と組み合わせて出題。"
    },
    {
      "id": "CUM",
      "name": "累積和", 
      "aliases": ["累積和", "cumulative sum"],
      "description": "配列の区間和をO(1)で計算するための前処理技法。S[i] = A[0] + ... + A[i-1] として累積和配列を構築し、区間[l,r)の和はS[r] - S[l]で求める。二次元版では二次元配列の矩形領域の和を扱う。いもす法と組み合わせて頻出する基本テクニック。"
    },
    {
      "id": "2PT",
      "name": "尺取り法",
      "aliases": ["尺取り", "sliding window", "しゃくとり"],
      "description": "左右2つのポインターを動かして効率的に解を探索する手法。条件を満たす部分区間や、ソート済み配列での二値探索などに使用。単調性を利用してO(N²)の全探索をO(N)に削減。競プロでは部分和問題、最長部分列、区間の最適化問題で頻出パターン。"
    },
    {
      "id": "LSG",
      "name": "遅延セグ木",
      "aliases": ["遅延セグ木", "lazy segment tree", "遅延評価セグメント木", "lazy propagation"],
      "description": "区間更新クエリを遅延評価で高速化したセグメント木。更新を即座に適用せず、必要時に伝播することでO(log N)を維持。区間加算・区間最大値取得などの複合クエリに対応。実装は複雑だが、区間更新が多い問題では必須。Range Add/Max Queryで頻出。"
    },
    {
      "id": "BBT",
      "name": "平衡二分木",
      "aliases": ["平衡二分木", "balanced binary tree", "AVL木", "赤黒木", "平衡二分探索木"],
      "description": "木の高さを自動調整して平衡を保つ二分探索木。AVL木、赤黒木、Treapなどの実装がある。挿入・削除・検索をO(log N)で実行し、k番目の要素取得も可能。競プロでは動的な順序統計や、multisetでは代替可能な場合も多いが、高度なクエリで真価を発揮。"
    },
    {
      "id": "DFS",
      "name": "深さ優先探索",
      "aliases": ["DFS", "深さ優先探索", "depth-first search", "dfs", "深さ優先"],
      "description": "グラフの各頂点をできるだけ深く探索する基本アルゴリズム。スタックまたは再帰で実装し、計算量はO(V+E)。訪問済みフラグで無限ループを防ぐ。競プロでは連結成分の検出、トポロジカルソート、サイクル判定、順列の全列挙で頻出する基礎技術。"
    },
    {
      "id": "BFS",
      "name": "幅優先探索",
      "aliases": ["BFS", "幅優先探索", "breadth-first search", "bfs", "幅優先"],
      "description": "グラフの各頂点を距離順に探索する基本アルゴリズム。キューを使用してO(V+E)で実行。重み無しグラフの最短路や、同心円状の探索が特徴。競プロでは迷路問題、木の距離計算、重み無し最短路、01-BFSの基礎として頻出する必須アルゴリズム。"
    },
    {
      "id": "DJK",
      "name": "ダイクストラ法",
      "aliases": ["ダイクストラ", "Dijkstra", "dijkstra", "単一始点最短路"],
      "description": "正の重みを持つグラフの単一始点最短路を求める貪欲アルゴリズム。優先度付きキューで未確定の最小距離頂点を選択し、隣接頂点の距離を更新。計算量はO(E log V)。競プロでは経路復元、k番目最短路、多点間最短路の前処理として最重要アルゴリズムの一つ。"
    },
    {
      "id": "WF",
      "name": "ワーシャルフロイド法",
      "aliases": ["ワーシャルフロイド", "Warshall-Floyd", "Floyd-Warshall", "全点対間最短路"],
      "description": "全ての頂点対間の最短路を求める動的計画法ベースのアルゴリズム。中間点kを経由する経路を順次考慮してO(V³)で計算。負の重みも扱え、負の閉路検出も可能。競プロでは頂点数が少ない完全グラフや、全点対距離が必要な問題で頻出。実装が簡潔で覚えやすい。"
    },
    {
      "id": "BF",
      "name": "ベルマンフォード法",
      "aliases": ["ベルマンフォード", "Bellman-Ford", "bellman ford"],
      "description": "負の重みを持つグラフの単一始点最短路を求めるアルゴリズム。V-1回のリラクゼーションで最短路を計算し、V回目で負の閉路を検出。計算量はO(VE)。競プロでは制約の厳しい問題や、負の閉路検出が必要な問題で使用。SPFA（改良版）もある。"
    },
    {
      "id": "LCA",
      "name": "最小共通祖先",
      "aliases": ["LCA", "Lowest Common Ancestor", "最小共通祖先"],
      "description": "木上の2頂点の最小共通祖先を高速に求めるアルゴリズム。ダブリングまたはHeavy-Light分解で実装し、前処理O(N log N)、クエリO(log N)。木上の距離計算やパスクエリの基礎となる。競プロでは木構造の問題で頻出し、オイラーツアー+RMQでも実現可能。"
    },
    {
      "id": "TDP",
      "name": "木DP",
      "aliases": ["木DP", "木dp", "tree DP", "木動的計画法", "木上DP"],
      "description": "木構造上で動的計画法を適用する手法。各ノードの部分木に対する最適値を再帰的に計算し、親ノードで統合する。計算量はO(N)で、DFSと組み合わせて実装。競プロでは木上の最大独立集合、木の直径、部分木の重み最大化など構造的な最適化問題で頻出。"
    },
    {
      "id": "RRT",
      "name": "全方位木DP",
      "aliases": ["全方位木DP", "全方位DP"],
      "description": "全ての頂点を根とする木DPの結果をO(N)で一度に計算する高度な手法。通常のDPと再根付けDPの2パスで実現。各頂点が根の場合の答えを効率的に求められる。競プロでは木の重心や、全頂点からの最適値が必要な問題で使用。実装は複雑だが計算量削減効果が大きい。"
    },
    {
      "id": "SCC",
      "name": "強連結成分",
      "aliases": ["SCC", "Strongly Connected Components", "強連結成分", "強連結成分分解"],
      "description": "有向グラフで互いに到達可能な頂点群を検出するアルゴリズム。Tarjan法やKosaraju法でO(V+E)で計算。強連結成分を縮約すると DAGになる性質を利用。競プロでは2-SATの解法、有向グラフの解析、依存関係の処理で頻出。実装はやや複雑だが威力は絶大。"
    },
    {
      "id": "MCF",
      "name": "最小費用流",
      "aliases": ["最小費用流", "min cost flow", "minimum cost flow", "MCF", "最小コスト流"],
      "description": "容量とコストを持つグラフで最小コスト最大流を求めるアルゴリズム。最短路反復法やコスト付きフロー増大路を使用。計算量はO(F・E log V)程度。競プロでは最適割り当て問題、輸送問題の最適化、二部マッチングのコスト版で使用。実装は高度だが汎用性が高い。"
    },
    {
      "id": "FFT",
      "name": "高速フーリエ変換",
      "aliases": ["FFT", "NTT", "高速フーリエ変換", "Fast Fourier Transform"],
      "description": "多項式の乗算や畳み込み演算をO(N log N)で行う変換アルゴリズム。複素数版のFFTと整数版のNTT（数論変換）がある。大きな整数の乗算や文字列マッチングにも応用。競プロでは畳み込み計算、多項式処理、組み合わせ論の母関数で頻出する高度テクニック。"
    },
    {
      "id": "FPS",
      "name": "形式的冪級数",
      "aliases": ["FPS", "形式的冪級数", "Formal Power Series"],
      "description": "無限級数を形式的に扱う数学的手法。生成関数として組み合わせ論の問題を代数的に解決。指数生成関数、通常生成関数などがある。FFT/NTTと組み合わせてO(N log N)で計算。競プロでは数列の漸化式、組み合わせの数え上げ、確率の母関数で使用する高等技法。"
    },
    {
      "id": "EDP",
      "name": "確率・期待値DP",
      "aliases": ["確率DP","確率dp", "期待値DP", "期待値dp", "確率/期待値DP", "probability DP", "expected DP"],
      "description": "確率や期待値を状態として持つ動的計画法。各状態での確率分布や期待値を遷移させて最終結果を計算。後ろ向きDPと前向きDPの使い分けが重要。競プロではランダムウォーク、確率的ゲーム、期待値最適化問題で頻出。実装時は浮動小数点の精度に注意が必要。"
    },
    {
      "id": "REV",
      "name": "主客転倒",
      "aliases": ["主客転倒"],
      "description": "問題の視点を変えて解法を見つける思考技法。主体と客体、原因と結果を入れ替えて考察。直接計算が困難な問題で威力を発揮する発想法。計算量は問題による。競プロでは数え上げ問題、最適化問題で「何を数えるか」「誰の立場で考えるか」を変える典型テクニック。"
    },
    {
      "id": "DBL",
      "name": "ダブリング",
      "aliases": ["ダブリング", "doubling", "繰り返し二乗法"],
      "description": "2の累乗倍ずつジャンプ幅を増やす高速化技法。前処理でO(N log N)、クエリでO(log N)を実現。k個先の要素や2^k回の操作結果を効率的に計算。競プロでは木上のk個上の祖先、べき乗計算、周期的な操作のスキップで頻出。LCAの実装でも重要な基礎技術。"
    },
    {
      "id": "BIN",
      "name": "二分探索",
      "aliases": ["二分探索", "binary search", "答えで二分探索", "バイナリサーチ"],
      "description": "ソート済み配列で目標値をO(log N)で発見する基本アルゴリズム。単調性を利用して探索範囲を半分ずつ絞る。上界・下界の検索や、答えで二分探索も可能。競プロでは配列検索の他、最適化問題で「答え」を二分探索する手法が頻出。実装の境界条件に注意が必要。"
    },
    {
      "id": "MIT",
      "name": "半分全列挙",
      "aliases": ["半分全列挙", "半分列挙"],
      "description": "全探索を前半・後半に分割して計算量を削減する手法。N要素の問題をN/2ずつに分け、O(2^N)をO(2^(N/2))に改善。前半の結果をソートし、後半の各結果に対して二分探索で組み合わせ。競プロでは部分和問題、ナップサック問題の大きなNで使用する強力な最適化技法。"
    },
    {
      "id": "SQD",
      "name": "平方分割",
      "aliases": ["平方分割"],
      "description": "データを√N個のブロックに分割して効率化する汎用技法。ブロック内とブロック間で処理を分け、更新・クエリをO(√N)で実現。Mo's algorithmの基礎でもある。競プロでは複雑なクエリ問題で、セグメント木では対応困難な操作を√N分解で解決する実用的手法。"
    },
    {
      "id": "GRD",
      "name": "貪欲法",
      "aliases": ["貪欲法","貪欲に", "greedy", "greedy algorithm", "グリーディー", "グリーディ"],
      "description": "各段階で局所的に最良の選択を行う最適化手法。交換論法やマトロイドで正当性を証明。実装は単純だが、適用可能性の判断が重要。計算量は問題による。競プロではスケジューリング、最小全域木、ハフマン符号化など、多くの最適化問題で頻出する基本戦略。"
    },
    {
      "id": "QAH",
      "name": "クエリ先読み",
      "aliases": ["クエリ先読み", "query ahead", "クエリ逆順", "クエリを逆"],
      "description": "全クエリを事前に読み込んで効率的に処理する手法。特に削除操作を追加操作に置き換えるため時系列を逆順で処理。Union-Findの削除クエリなどで威力を発揮。競プロでは動的連結性、削除を含むクエリ、オフライン処理が可能な問題で頻出する実用的テクニック。"
    },
    {
      "id": "BBF",
      "name": "ビット全探索",
      "aliases": ["ビット全探索", "bit全探索"],
      "description": "N個の要素の部分集合をビット表現で全列挙する手法。0から2^N-1までの各整数を部分集合として解釈し、ビット演算で要素の包含を判定。計算量はO(N・2^N)。競プロでは小さなNでの組み合わせ最適化、状態空間探索で頻出。bitDPの基礎でもある重要な全探索技法。"
    },
    {
      "id": "BDP",
      "name": "bitDP",
      "aliases": ["bitDP","bitdp", "bit DP", "bit dp", "ビットDP", "bitdp", "集合DP"],
      "description": "ビットマスクで集合状態を表現する動的計画法。各ビットが要素の選択状態を示し、2^Nの状態をDPテーブルで管理。計算量はO(状態数×遷移)でO(N・2^N)が典型。競プロでは巡回セールスマン問題、最小頂点被覆、集合の組み合わせ最適化で頻出する重要手法。"
    },

    {
      "id": "SA",
      "name": "接尾辞配列",
      "aliases": ["suffix array", "接尾辞配列", "サフィックス配列"],
      "description": "文字列の全接尾辞を辞書順ソートしたインデックス配列。構築はO(N log N)またはO(N)、LCP配列と組み合わせて高度なクエリを実現。文字列の部分文字列検索、最長共通部分文字列などが可能。競プロでは文字列アルゴリズムの基盤として、複雑な文字列処理問題で使用。"
    },
    {
      "id": "TRI",
      "name": "Trie木",
      "aliases": ["Trie", "トライ木", "trie", "プレフィックス木", "接頭辞木"],
      "description": "文字列集合を効率的に管理する木状データ構造。各ノードが文字を持ち、根から葉への経路が文字列を表現。挿入・検索・削除がO(文字列長)で実行可能。競プロでは辞書、接頭辞検索、文字列の動的管理で使用。AhoCorasickアルゴリズムの基礎でもある重要な文字列処理ツール。"
    },
    {
      "id": "LCP",
      "name": "最長共通接頭辞",
      "aliases": ["LCP", "Longest Common Prefix"],
      "description": "複数文字列の最長共通接頭辞を求める問題。接尾辞配列と組み合わせたLCP配列で隣接する接尾辞の共通接頭辞長を管理。構築はO(N)で可能。競プロでは文字列の類似度計算、重複部分文字列の検出、文字列圧縮で使用。高度な文字列処理の基礎概念として重要。"
    },
    {
      "id": "RH",
      "name": "ローリングハッシュ",
      "aliases": ["ローリングハッシュ", "rolling hash"],
      "description": "文字列をハッシュ値に変換し、部分文字列比較をO(1)で行う技法。累積ハッシュで任意区間のハッシュを高速計算。衝突の可能性があるため複数のハッシュ関数を併用。競プロでは文字列検索、回文判定、最長共通部分文字列で頻出。実装は簡単で実用性が高い基本技法。"
    },
    {
      "id": "Z",
      "name": "Z-algorithm",
      "aliases": ["Z-algorithm", "z-algorithm", "Zアルゴリズム"],
      "description": "文字列の各位置からの最長共通接頭辞長を線形時間で計算するアルゴリズム。各位置iでs[0:]とs[i:]の最長共通接頭辞長Z[i]を求める。計算量はO(N)で、パターンマッチングに応用。競プロでは文字列検索、周期性の検出で使用。KMPより実装が簡潔で理解しやすい。"
    },
    {
      "id": "MAP",
      "name": "写像12相",
      "aliases": ["写像12相", "stirling numbers", "スターリング数", "写像の数え上げ"],
      "description": "N個の要素からM個の要素への写像を12パターンに分類して数え上げる組み合わせ論の体系。単射・全射・全単射の組み合わせで分類し、スターリング数などを使用。計算量は公式による。競プロでは高度な数え上げ問題、置換・組み合わせの分類で使用する専門的な数学的手法。"
    },
    {
      "id": "GND",
      "name": "Grundy数",
      "aliases": ["Grundy数", "grundy数","grundy number", "nim値"],
      "description": "2人完全情報ゲームの局面を数値化するゲーム理論の概念。各局面のGrundy数をmex（minimum excludant）として定義し、複数ゲームの合成はXORで計算。計算量は状態数に依存。競プロではNimゲーム、石取りゲーム、複合ゲームの必勝判定で頻出するゲーム理論の核心概念。"
    },
    {
      "id": "GAM",
      "name": "ゲーム理論",
      "aliases": ["ゲーム", "ゲーム理論", "2人ゲーム", "勝敗判定"],
      "description": "2人交互ゲームの最適戦略を数学的に解析する理論。勝ち・負け・引き分けの局面を分類し、後手必勝・先手必勝を判定。minimax法、Grundy数、必勝戦略の構築が基本。競プロでは石取り、Nim、盤面ゲームで頻出。実装は状態探索やDPが中心となる応用数学分野。"
    },
    {
      "id": "ROT",
      "name": "座標回転",
      "aliases": ["座標回転"],
      "description": "2次元座標系で点を原点中心にθ回転させる変換。回転行列を用いて(x',y')=(x cosθ-y sinθ, x sinθ+y cosθ)で計算。45度回転でマンハッタン距離をチェビシェフ距離に変換する応用が重要。競プロでは幾何問題、距離の最適化、座標変換で頻出する基本的な線形変換技法。"
    },
    {
      "id": "COW",
      "name": "牛ゲー",
      "aliases": ["牛ゲー"],
      "description": "線形制約条件をグラフの辺として表現し、線形計画問題を最短路問題に変換する手法。不等式制約をグラフの重み付き辺として構築し、負の閉路検出で解の存在性を判定。計算量はベルマンフォードと同等。競プロでは制約充足問題、連立不等式の解法で使用される高度なモデル化技法。"
    },
    {
      "id": "HAR",
      "name": "調和級数",
      "aliases": ["調和級数", "harmonic series"],
      "description": "調和級数H_n = 1/1 + 1/2 + ... + 1/n ≈ log nの性質を利用した計算量解析手法。約数の個数やエラトステネスの篩の解析で使用。見た目O(N²)のアルゴリズムがO(N log N)になる場合がある。競プロでは約数列挙、倍数処理、素数関連の計算量見積もりで重要な数学的知識。"
    },
    {
      "id": "MAN",
      "name": "マンハッタン距離",
      "aliases": ["マンハッタン距離", "manhattan distance"],
      "description": "2点間の座標差の絶対値の和|x1-x2|+|y1-y2|で定義される距離。45度座標回転(u,v)=((x+y)/√2,(x-y)/√2)でチェビシェフ距離max(|u1-u2|,|v1-v2|)に変換可能。競プロでは最遠点対、距離の最適化、幾何問題で頻出。タクシー距離とも呼ばれる重要な距離概念。"
    },
    {
      "id": "CON",
      "name": "構築問題",
      "aliases": ["構築"],
      "description": "与えられた条件を満たす具体的な解を実際に構築する問題。存在証明だけでなく構築的アルゴリズムが必要。貪欲法、グラフ理論、組み合わせ論の知識を実装レベルで活用。競プロでは数列構築、グラフ構築、配置問題で頻出。理論と実装の両方が問われる実践的な問題タイプ。"
    },
    {
      "id": "PAR",
      "name": "括弧列",
      "aliases": ["括弧列", "括弧対応"],
      "description": "括弧の正しい対応関係を判定・処理する文字列問題。スタックで対応を管理し、適切な括弧列の総数はn番目カタラン数C_n = (2n)!/(n!(n+1)!)個。計算量は文字列長に比例。競プロでは括弧列判定、括弧の挿入・削除、数式処理、組み合わせ論で頻出する基本的な文字列処理。"
    },
    {
      "id": "BS",
      "name": "Bitset",
      "aliases": ["Bitset", "bitset"],
      "description": "ビット演算で集合を高速操作するデータ構造。和集合・積集合・差集合をO(N/64)で計算し、要素数の多い集合で効率的。C++のstd::bitsetが代表的実装。メモリ効率も良い。競プロでは大きな集合の演算、状態管理、動的計画法の最適化で使用。ビット並列処理による高速化が特徴。"
    },
    {
      "id": "GCD",
      "name": "最大公約数",
      "aliases": ["GCD", "greatest common divisor", "gcd", "最大公約数", "ユークリッド互除法"],
      "description": "2つの正整数の最大公約数を求める基本的な数論問題。ユークリッドの互除法でO(log min(a,b))で計算。gcd(a,b) = gcd(b, a mod b)の再帰で実装。最小公倍数lcm(a,b) = a*b/gcd(a,b)との関係も重要。競プロでは約分、周期性、数論的問題の前処理として頻出する基礎概念。"
    },
    {
      "id": "HLD",
      "name": "Heavy-Light分解",
      "aliases": ["HLD", "Heavy-Light分解", "heavy light decomposition"],
      "description": "木を重い辺と軽い辺に分解してパスクエリを高速化する高度な技法。各頂点から部分木サイズが最大の子への辺を重い辺とし、重いパスをセグメント木で管理。パス更新・取得をO(log² N)で実現。競プロでは木上の複雑なクエリ、パス更新問題で使用される上級者向け技術。"
    },
    {
      "id": "XOR",
      "name": "XOR演算",
      "aliases": ["XOR", "xor", "排他的論理和", "exclusive or"],
      "description": "排他的論理和演算の数学的性質を活用する問題。XORは可換・結合的で、a XOR a = 0、a XOR 0 = aの性質がある。線形性により連立方程式も解ける。計算量は演算回数に比例。競プロでは配列の部分XOR、XOR最大化、基底計算、暗号的性質を使った問題で頻出する重要な演算。"
    },
    {
      "id": "DAG",
      "name": "DAG",
      "aliases": ["DAG", "Directed Acyclic Graph", "有向非循環グラフ", "トポロジカルソート"],
      "description": "有向グラフで閉路を持たないグラフ構造を扱う問題。トポロジカルソートで線形順序を構築し、DPで最適化問題を解く。計算量はO(V+E)。依存関係・順序制約のあるシステムを自然に表現。競プロでは最長路、依存関係のスケジューリング、階層構造の処理で頻出する重要なグラフクラス。"
    },
    {
      "id": "CAT",
      "name": "カタラン数",
      "aliases": ["カタラン数", "Catalan number", "catalan"],
      "description": "組み合わせ論の重要な数列C_n = (2n)!/(n!(n+1)!)。括弧列、二分木、山の形、対角線を交差しない格子パスなど多くの構造を数える。漸化式C_n = Σ(C_i × C_{n-1-i})も有用。競プロでは括弧問題、木の数え上げ、格子経路で頻出する基本的な組み合わせ数学の概念。"
    },
    {
      "id": "SIM",
      "name": "シミュレーション",
      "aliases": ["シミュレーション"],
      "description": "問題文で指定された処理をそのまま実装・実行する問題。アルゴリズムの工夫より実装精度が重要で、境界条件や例外処理に注意。計算量は処理内容による。競プロでは基本的な実装問題、複雑な条件分岐、状態遷移の模擬で頻出。デバッグ能力と丁寧な実装が求められる基礎的な問題タイプ。"
    },
    {
      "id": "CMP",
      "name": "座標圧縮",
      "aliases": ["座標圧縮"],
      "description": "大きな座標値を0からN-1の小さな値に圧縮する前処理技法。使用される座標のみを抽出してソートし、二分探索で変換。メモリ使用量とアクセス時間を削減。計算量はO(N log N)。競プロでは範囲が大きい座標、セグメント木への適用、スパースな配列の効率化で頻出する実用的手法。"
    },
    {
      "id": "TOP",
      "name": "トポロジカルソート",
      "aliases": ["トポロジカルソート", "topological sort"],
      "description": "DAG（有向非循環グラフ）の頂点を依存関係を満たす線形順序に並べるアルゴリズム。入次数0の頂点から順に処理し、O(V+E)で実行。Kahn法やDFSベースの実装がある。競プロでは依存関係のあるタスク処理、先行制約つきスケジューリングで頻出する基本的なグラフアルゴリズム。"
    },
    {
      "id": "HAM",
      "name": "ハミルトン路",
      "aliases": ["ハミルトン路", "hamilton path", "hamilton cycle"],
      "description": "グラフの全頂点を一度ずつ通る経路・閉路を求めるNP困難問題。ハミルトン路は開路、ハミルトン閉路は閉路を指す。小さなグラフでは動的計画法やバックトラックで解ける。計算量は指数的。競プロでは小規模なグラフでの経路問題、状態空間探索で出題される計算困難性の典型例。"
    },
    {
      "id": "BCK",
      "name": "バックトラック",
      "aliases": ["バックトラック", "backtrack"],
      "description": "制約充足問題を系統的に探索する手法。部分解を段階的に構築し、制約違反時は前の選択に戻って別の選択を試す。枝刈りで探索空間を削減。計算量は指数的だが枝刈りで改善。競プロでは順列生成、N-Queens、数独、制約充足で頻出する基本的な全探索戦略。実装は再帰が典型。"
    },
    {
      "id": "BOP",
      "name": "ビット演算",
      "aliases": ["ビット演算", "bit operation", "bit manipulation"],
      "description": "AND・OR・XOR・シフト等のビット演算を活用する問題。集合をビットで表現し、演算で集合操作を高速化。ビット数に比例した計算量。2の累乗判定、最下位ビット抽出、ポップカウントなどが基本操作。競プロではbit全探索、フラグ管理、高速化テクニックで頻出する低レベル最適化手法。"
    },
    {
      "id": "MEM",
      "name": "メモ化再帰",
      "aliases": ["メモ化再帰"],
      "description": "再帰関数の計算結果をメモ化して重複計算を避ける最適化手法。トップダウンDPの実装方式で、計算済みの引数に対してはメモから結果を返す。計算量は部分問題数に比例。競プロでは複雑な状態遷移のDP、再帰的な最適化問題で使用。実装は辞書やテーブルでメモを管理。"
    },
    {
      "id": "EUC",
      "name": "ユークリッドの互除法",
      "aliases": ["ユークリッドの互除法", "Euclidean algorithm", "互除法", "拡張ユークリッド"],
      "description": "2つの整数の最大公約数をO(log min(a,b))で求める基本アルゴリズム。gcd(a,b) = gcd(b, a mod b)の性質を利用。拡張ユークリッド法ではax + by = gcd(a,b)の整数解も求まる。競プロでは約分、最小公倍数、逆元計算、一次不定方程式で頻出する数論の基礎技術。"
    },
    {
      "id": "TER",
      "name": "三分探索",
      "aliases": ["三分探索", "ternary search"],
      "description": "単峰性を持つ関数の最大値・最小値をO(log N)で求める探索手法。区間を1:2:1に分割し、関数値比較で探索範囲を2/3に狭める。連続関数と離散関数の両方に適用可能。競プロでは凸最適化、実数値の最大化・最小化、単調性を利用した最適化問題で使用する基本的な数値計算手法。"
    },
    {
      "id": "CRT",
      "name": "中国剰余定理",
      "aliases": ["中国剰余定理"],
      "description": "互いに素な法m1,m2,...,mkに対する連立合同式x≡a1(mod m1), x≡a2(mod m2),...の唯一解を求める定理。解はmod(m1×m2×...×mk)で一意に決まる。拡張ユークリッド法で構築的に解を求める。競プロでは周期性問題、複数の剰余条件、暗号理論で使用される重要な数論定理。"
    },
    {
      "id": "PQ",
      "name": "優先度付きキュー",
      "aliases": ["優先度付きキュー", "priority queue", "heap", "ヒープ"],
      "description": "要素を優先度順に取り出すヒープベースのデータ構造。挿入・削除・最小値取得をO(log N)で実行。二分ヒープが標準実装。多くのグラフアルゴリズムの核心部分を担う。競プロではダイクストラ法、プリム法、イベント処理、k番目の値の管理で頻出する基本的だが重要なデータ構造。"
    },
    {
      "id": "ENM",
      "name": "全列挙",
      "aliases": ["全列挙", "enumeration"],
      "description": "条件を満たす全ての解や状態を系統的に生成・列挙する手法。順列・組み合わせ・部分集合の生成が典型例。計算量は生成される要素数に比例。再帰・反復・bit演算等の実装方法がある。競プロでは小規模な場合分け、解の構築、全パターンの検証で使用する基本的な問題解決アプローチ。"
    },
    {
      "id": "BRT",
      "name": "全探索",
      "aliases": ["全探索", "brute force", "ブルートフォース", "exhaustive search"],
      "description": "全ての可能性を漏れなく調査する最も基本的な問題解決手法。計算量は大きいが実装が単純で、確実に最適解を発見。枝刈りや順序の工夫で高速化可能。小さな問題サイズでは最も確実な解法。競プロでは制約の小さい問題、複雑な条件の検証、他手法の正当性確認で頻出する基礎戦略。"
    },
    {
      "id": "REC",
      "name": "再帰関数",
      "aliases": ["再帰関数", "recursive function"],
      "description": "関数が自分自身を呼び出す実装手法。問題をより小さな同種の問題に分割し、ベースケースで終了。スタック使用量に注意が必要。計算量は再帰の深さと各段階の処理に依存。競プロでは木構造の処理、分割統治、DFS、動的計画法で頻出する基本的なプログラミング技法。"
    },
    {
      "id": "CVX",
      "name": "凸包",
      "aliases": ["凸包", "convex hull"],
      "description": "平面上の点集合を包む最小の凸多角形を求める計算幾何問題。Graham scanやAndrew法でO(N log N)で計算。反時計回りの頂点列として出力。面積最大の凸多角形や、点の内外判定の前処理として使用。競プロでは幾何問題、最適化問題で頻出する計算幾何学の基本アルゴリズム。"
    },
    {
      "id": "DC",
      "name": "分割統治法",
      "aliases": ["分割統治法", "divide and conquer", "分割統治"],
      "description": "問題を小さな部分問題に分割し、各部分を解いて結果を統合する基本的なアルゴリズム設計手法。典型例はマージソート・クイックソート・FFT。計算量はT(n) = aT(n/b) + f(n)の形で解析。競プロでは高速なソート・探索・数値計算で頻出し、多くの効率的アルゴリズムの設計原理。"
    },
    {
      "id": "SCH",
      "name": "区間スケジューリング",
      "aliases": ["区間スケジューリング", "interval scheduling"],
      "description": "与えられた区間集合から重複しない区間を最大数選ぶ最適化問題。終了時刻順にソートし、貪欲に選択することで最適解を得る。計算量はソートのO(N log N)が支配的。交換論法で正当性証明可能。競プロでは会議室予約、タスクスケジューリングで頻出する貪欲法の典型的成功例。"
    },
    {
      "id": "PAL",
      "name": "回文",
      "aliases": ["回文判定", "palindrome", "回文", "Manacher"],
      "description": "文字列が前から読んでも後ろから読んでも同じかを判定する問題。単純判定はO(N)、全位置の最長回文はManacher法でO(N)。動的計画法で部分文字列の回文判定も可能。競プロでは文字列処理、最長回文部分文字列、回文の数え上げで頻出する基本的な文字列アルゴリズム。"
    },
    {
      "id": "MTH",
      "name": "数学",
      "aliases": ["数学的考察", "数論", "整数問題"],
      "description": "数学的性質・公式・定理を活用して解く問題の総称。整数論・組み合わせ論・代数・解析などの知識が必要。計算量は手法による。実装よりも数学的洞察が重要で、公式の導出や証明が求められることも。競プロでは高度な数学的背景知識が要求される上級者向け問題カテゴリ。"
    },
    {
      "id": "MST",
      "name": "最小シュタイナー木",
      "aliases": ["最小シュタイナー木", "Steiner tree", "シュタイナー木"],
      "description": "指定されたターミナル頂点を全て含む最小コストの木を求める問題。追加の中継点（Steiner点）の使用も許可。最小全域木の一般化でNP困難。小規模ではbitDPで解ける。計算量は指数的。競プロでは小さなグラフでの接続最適化問題として出題される高度なグラフ理論問題。"
    },
    {
      "id": "LCM",
      "name": "最小公倍数",
      "aliases": ["最小公倍数", "least common multiple", "lcm", "LCM"],
      "description": "複数の整数の最小公倍数を求める基本的な数論問題。2数の場合lcm(a,b) = a×b/gcd(a,b)で計算し、複数の数は順次適用。素因数分解による計算も可能。オーバーフロー注意。競プロでは周期性、約数・倍数問題、時間の同期で頻出する基礎的な整数論概念。"
    },
    {
      "id": "OPT",
      "name": "最適化問題",
      "aliases": ["最適化", "optimization", "最適化問題", "optimization problem"],
      "description": "制約条件下で目的関数の最大値・最小値を求める数学的問題。線形計画法・整数計画法・動的計画法などの手法で解く。制約の種類と目的関数の形で解法が決まる。競プロでは資源配分、ナップサック問題、フロー問題として現れる、実用的な数学モデリング能力が問われる問題群。"
    },
    {
      "id": "PFT",
      "name": "素因数分解",
      "aliases": ["素因数分解", "prime factorization", "factorization"],
      "description": "整数を素数の積の形に分解する基本的な数論問題。小さな数には試し割りO(√N)、大きな数にはポラード・ロー法など高速アルゴリズムを使用。素因数の指数も管理する。計算量は数の大きさに依存。競プロでは約数の個数計算、数論的関数、暗号問題で頻出する重要な数論操作。"
    },
    {
      "id": "CMB",
      "name": "組み合わせ論",
      "aliases": ["組み合わせ", "combinatorics", "combination", "permutation", "順列", "重複組合せ"],
      "description": "順列・組み合わせ・重複組合せなどの数え上げを扱う数学分野。二項係数C(n,k)、包除原理、生成関数が主要ツール。計算量は組み合わせの規模による。大きな値では逆元やルーカスの定理を使用。競プロでは場合の数、確率、動的計画法と組み合わせて頻出する基本的な数学知識。"
    },
    {
      "id": "EDT",
      "name": "編集距離",
      "aliases": ["編集距離", "edit distance", "Levenshtein distance", "レーベンシュタイン距離"],
      "description": "2つの文字列を一致させるのに必要な最小編集操作数を求める問題。挿入・削除・置換操作を許可し、動的計画法でO(nm)で計算。LCS（最長共通部分列）と双対関係。文字列の類似度指標として重要。競プロでは文字列処理、差分計算、近似マッチングで頻出する基本的な動的計画法応用。"
    },
    {
      "id": "MAT",
      "name": "行列",
      "aliases": ["行列演算",  "行列の演算", "行列の性質"],
      "description": "行列の加減乗算・逆行列・行列式・固有値などを扱う線形代数問題。行列の累乗は繰り返し二乗法でO(n³ log k)、連立方程式はガウス消去法でO(n³)。競プロでは線形漸化式の高速化、グラフの隣接行列、幾何変換で使用される数学的ツール。計算量は行列サイズに依存。"
    },
    {
      "id": "LEX",
      "name": "辞書順",
      "aliases": ["辞書順", "lexicographic order", "辞書式順序"],
      "description": "要素を辞書のように左から順番に比較する順序関係。文字列では文字コード順、数列では要素を左から比較。同じ長さでない場合は短い方を先に配置。計算量は比較する要素数に比例。競プロでは順列の生成・ソート、文字列処理、順序統計で頻出する基本的な順序概念。"
    },
    {
      "id": "PHP",
      "name": "鳩の巣原理",
      "aliases": ["鳩の巣原理", "鳩の巣", "pigeonhole principle"],
      "description": "n+1個の物をn個の容器に入れる時、少なくとも1つの容器に2個以上入ることを保証する基本原理。存在証明や計数論の基礎で、構築的でない証明手法。計算量は適用方法による。競プロでは存在性の証明、最大・最小の保証、重複の検出で使用される基本的な数学的論理。"
    },
    {
      "id": "MNC",
      "name": "Manacher法",
      "aliases": ["Manacher", "manacher"],
      "description": "各位置を中心とする最長回文の半径をO(N)で計算するアルゴリズム。既に計算した回文情報を活用して効率的に拡張。奇数長・偶数長回文を統一的に処理。全位置での最長回文を一度に求められる。競プロでは回文問題、文字列の周期性解析で使用される高効率な文字列処理特化アルゴリズム。"
    },
    {
      "id": "01B",
      "name": "0-1 BFS",
      "aliases": ["0-1 BFS", "01BFS"],
      "description": "辺の重みが0または1のみのグラフでの最短路を求める特殊なBFS。重み0の辺はdequeの前に、重み1の辺は後ろに追加してO(V+E)で実行。ダイクストラ法の特殊ケース。競プロでは状態遷移のコストが0/1の問題、グリッド上の移動制約で頻出する効率的な最短路アルゴリズム。"
    },
    {
      "id": "BPM",
      "name": "二部マッチング",
      "aliases": ["二部マッチング", "二部グラフマッチング", "二部グラフの最大マッチング"],
      "description": "二部グラフで一対一対応の最大個数を求める問題。各頂点が高々1つの辺で接続される制約下での最適化。フロー問題への帰着やハンガリー法でO(V³)またはO(VE)で解ける。競プロでは割り当て問題、タスクと人員の最適配置、リソースマッチングで頻出するグラフ理論の基本問題。"
    },
    {
      "id": "2CC",
      "name": "二重連結成分",
      "aliases": ["二重連結成分", "2-connected components", "block-cut tree"],
      "description": "無向グラフを関節点（除去すると連結成分が増える頂点）で分離した各成分の分解。block-cut treeで構造化し、各blockは2-connectedまたは単一辺。DFSベースでO(V+E)で計算。競プロでは橋・関節点の検出、グラフの頑健性解析で使用される高度なグラフ理論技法。"
    },
    {
      "id": "ET",
      "name": "オイラーツアー",
      "aliases": ["オイラーツアー", "Euler tour"],
      "description": "木をDFSで探索し、各頂点の訪問・離脱時刻を記録して一次元配列に変換する技法。部分木が配列の連続区間になるため、セグメント木等でO(log N)クエリが可能。計算量はO(N)で変換、各クエリO(log N)。競プロでは木上の部分木クエリ、動的な木構造管理で使用される実用的な次元削減技法。"
    },
    {
      "id": "FLW",
      "name": "フロー問題",
      "aliases": ["フロー", "flow", "ネットワークフロー", "最大流"],
      "description": "容量制約のあるネットワークでの流れを扱う問題の総称。最大流・最小費用流・多重商品流など多様な変種がある。アルゴリズムは問題により異なるが、多くがO(V²E)〜O(VE²)程度。競プロでは二部マッチング・カット問題・輸送最適化への帰着で頻出するグラフ理論の重要分野。"
    },
    {
      "id": "MNC2",
      "name": "最小カット",
      "aliases": ["最小カット", "min cut", "minimum cut", "s-t cut"],
      "description": "グラフを2つの部分に分割する最小コストの辺集合を求める問題。最大流最小カット定理により、s-t間の最大流値と等しい。最大流アルゴリズムで解け、計算量は使用する最大流アルゴリズムに依存。競プロでは二部分割、ボトルネック検出、信頼性解析で頻出する双対性を活用した最適化問題。"
    },
    {
      "id": "MON",
      "name": "Monge性",
      "aliases": ["Monge", "monge", "Monge性", "四角不等式"],
      "description": "四角不等式を満たす関数に対する動的計画法の最適化技法。コスト関数がMonge性（交差する区間のコストが劣モジュラ）を持つ時、分割統治やKnuth-Yao法でO(N²)をO(N log N)に改善。競プロでは区間DP、最適二分探索木で使用される、特殊な性質を活用した高度な最適化手法。"
    },
    {
      "id": "ZT",
      "name": "ゼータ変換",
      "aliases": ["ゼータ変換", "zeta transform"],
      "description": "部分集合の包含関係を利用した高次元累積和の技法。集合Sに対してf(S) = Σ_{T⊆S} g(T)をO(N 2^N)で計算。メビウス変換の逆変換でもある。集合上の動的計画法や畳み込み演算で威力を発揮。競プロでは集合DP、高速ウォルシュ変換で使用される高度な組み合わせ論的計算技法。"
    },
    {
      "id": "ADP",
      "name": "Alien DP",
      "aliases": ["Alien DP", "slope trick", "傾きトリック", "Lagrange緩和"],
      "description": "制約付き最適化問題で制約をペナルティ項として目的関数に含め、パラメータ調整で元問題を解く高度な技法。Lagrange緩和による双対問題を利用。slope trickと組み合わせることも多い。競プロでは制約の厳しいDP最適化、凸最適化で使用される数学的に高度な解法手法。"
    },
    {
      "id": "PIE",
      "name": "包除原理",
      "aliases": ["包除原理", "inclusion-exclusion principle"],
      "description": "複数集合の和集合の要素数を効率的に計算する組み合わせ論の基本原理。|A∪B| = |A| + |B| - |A∩B|を一般化し、各項の符号を交互に変える。計算量は集合数に対し指数的。競プロでは重複を避けた数え上げ、確率計算、グラフの性質で頻出する基本的だが強力な計数手法。"
    },
    {
      "id": "DIV",
      "name": "約数列挙",
      "aliases": ["約数列挙"],
      "description": "整数Nの全約数を効率的に列挙する問題。1からsqrt(N)まで試し割りし、Nをiで割った商も約数として追加。計算量はO(√N)で、約数の個数はO(N^ε)個程度。ソートすればO(d(N) log d(N))追加。競プロでは数論関数、約数和、最大公約数で頻出する基本的な整数論操作。"
    },
    {
      "id": "WM",
      "name": "Wavelet Matrix",
      "aliases": ["Wavelet Matrix", "ウェーブレット行列", "多次元範囲クエリ"],
      "description": "多次元データに対する範囲クエリを効率化する高度なデータ構造。wavelet treeの行列版で、k番目の値や範囲内での順位クエリをO(log N)で処理。構築はO(N log N)。競プロでは二次元範囲クエリ、動的な順序統計、高度なデータ解析で使用される特殊化されたデータ構造。"
    },
    {
      "id": "PSG",
      "name": "永続セグメント木",
      "aliases": ["永続セグ木", "persistent segment tree", "永続データ構造"],
      "description": "更新履歴を全て保持するセグメント木。各更新で新しいバージョンを作成し、過去の任意時点での値を参照可能。空間計算量はO(N log N × 更新回数)だが、差分管理で削減可能。競プロでは時系列クエリ、undo機能、履歴を持つデータ構造で使用される高度な永続化技法。"
    },
    {
      "id": "MOS",
      "name": "Mo's algorithm",
      "aliases": ["Mo's algorithm"],
      "description": "オフラインクエリを√N単位で分割し、効率的に処理するアルゴリズム。クエリを左端でソートしてブロック分けし、各ブロック内を右端でソート。ポインタを動かして状態を更新。計算量O((N+Q)√N)。競プロでは複雑な区間クエリ、動的な統計情報で使用される実用的な√分解応用技法。"
    },
    {
      "id": "IMO",
      "name": "いもす法",
      "aliases": ["いもす法", "Imos法", "imos法", "IMOS法"],
      "description": "区間加算クエリを差分配列で効率化する技法。区間[l,r]への値aの加算を、差分配列のdiff[l] += a, diff[r+1] -= aで表現。最後に累積和で元配列を復元。区間更新O(1)、全体構築O(N)。競プロでは複数区間更新、範囲加算処理で頻出する差分を活用した効率化手法。"
    },
    {
      "id": "CCP",
      "name": "座標圧縮",
      "aliases": ["座標圧縮", "座圧"],
      "description": "大きな座標値を小さな値に圧縮する技法。メモリ使用量とアクセス時間を削減できます。"
    },
    {
      "id": "2ST",
      "name": "2-SAT",
      "aliases": ["2-SAT", "2SAT", "2-充足可能性問題"],
      "description": "各節に高々2つのリテラルを持つ論理式の充足可能性を判定する問題。含意グラフを構築し、強連結成分分解でO(N)で解ける。充足不可能性は矛盾する強連結成分で検出。競プロでは論理制約、二択問題、制約充足で使用されるSATの特殊ケースを効率化した重要なアルゴリズム。"
    },
    {
      "id": "LIS",
      "name": "最長増加部分列",
      "aliases": ["LIS", "Longest Increasing Subsequence", "最長増加部分列"],
      "description": "数列から単調増加する最長の部分列を求める問題。動的計画法の単純実装はO(N²)だが、二分探索を利用してO(N log N)に改善可能。patience sortingの応用でもある。競プロでは数列の解析、最適化問題、動的計画法の典型として頻出する基本的だが重要な問題パターン。"
    },
    {
      "id": "TSP",
      "name": "巡回セールスマン問題",
      "aliases": ["巡回セールスマン問題", "Traveling Salesman Problem", "TSP"],
      "description": "全都市を一度ずつ訪れて出発点に戻る最短経路を求める古典的最適化問題。状態を訪問済み都市集合と現在位置で表現し、bitDPでO(N² 2^N)で解ける。NP困難だが小規模では実用的。競プロでは経路最適化、動的計画法、combinatorial optimizationの代表例として頻出。"
    },
    {
      "id": "OES",
      "name": "OEIS参照",
      "aliases": ["OEIS", "オンライン整数列大辞典", "The On-Line Encyclopedia of Integer Sequences", "数列データベース"],
      "description": "未知の整数列の規則性をオンライン整数列大辞典（OEIS）で調査する手法。実験的に数値を計算し、パターンを検索して数学的性質を特定。計算量は実験規模による。競プロでは複雑な数え上げ、未知の漸化式、数学的予想の確認で使用される、知識データベースを活用した問題解決アプローチ。"
    }
  ]
}